--UNIVERSITATE
create table universitate
(id_universitate number(5) constraint pk_universitate primary key,
nume varchar2(50),
nr_facultati number(5)
);

create sequence seq_universitate
increment by 1
start with 0
minvalue 0
maxvalue 5
nocycle;

insert into universitate values (seq_universitate.nextval, 'Universitatea din Bucuresti', 6);
insert into universitate values (seq_universitate.nextval, 'Universitatea Babes-Bolyai', 7);
insert into universitate values (seq_universitate.nextval, 'Universitatea Politehnica', 10);
insert into universitate values (seq_universitate.nextval, 'Universitatea „Alexandru Ioan Cuza”', 9);
insert into universitate values (seq_universitate.nextval, 'Academia de Studii Economice', 10);

commit;

--LOCATIE
create table locatie
(id_locatie number(5) constraint pk_locatie primary key,
oras varchar2(50),
strada varchar2(50),
numar number(5)
);

create sequence seq_locatie
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

insert into locatie values (seq_locatie.nextval, 'Bucuresti', 'Strada Academiei', 14);
insert into locatie values (seq_locatie.nextval, 'Cluj', ' Strada Ploie?ti', 22);
insert into locatie values (seq_locatie.nextval, 'Iasi', 'Bulevardul Carol I', 11);
insert into locatie values (seq_locatie.nextval, 'Bucuresti', 'Piata Romana', 6);
insert into locatie values (seq_locatie.nextval, 'Bucuresti', 'Splaiul Independentei', 313);
insert into locatie values (seq_locatie.nextval, 'Bucuresti', ' Strada Edgar Quinet', 5);
insert into locatie values (seq_locatie.nextval, 'Bucuresti', 'Splaiul Independentei', 314);
insert into locatie values (seq_locatie.nextval, 'Bucuresti', 'Bulevardul Dacia', 41);
insert into locatie values (seq_locatie.nextval, 'Cluj', 'Strada Mihail Kog?lniceanu', 1);
insert into locatie values (seq_locatie.nextval, 'Iasi', 'Bulevardul Carol I', 20);

commit;

--FACULTATE
create table facultate
(id_facultate number(5) constraint pk_facultate primary key,
nume varchar2(50),
id_locatie number(5),
constraint fk_facultate1 foreign key (id_locatie) references locatie(id_locatie),
id_universitate number(5),
constraint fk_facultate2 foreign key (id_universitate) references universitate(id_universitate)
);

create sequence seq_facultate
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

insert into facultate values (seq_facultate.nextval, 'Facultatea de Matematica si Informatica', 1, 1);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Matematica si Informatica', 2, 2);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Litere', 3, 4);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Drept', 4, 5);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Energetica', 5, 3);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Litere', 6, 1);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Automatica si Calculatoare', 7, 3);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Business si Turism', 8, 5);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Fizica', 9, 2);
insert into facultate values (seq_facultate.nextval, 'Facultatea de Biologie', 10, 4);

commit;

--INGRIJITOR
create table ingrijitor
(id_ingrijitor number(5) constraint pk_ingrijitor primary key,
nume varchar2(50),
prenume varchar2(50),
salariu number(5),
data_angajarii date,
id_facultate number(5),
constraint fk_ingrijitor foreign key (id_facultate) references facultate(id_facultate)
);

create sequence seq_ingrijitor
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;
  
insert into ingrijitor values (seq_ingrijitor.nextval, 'Argint', 'Cornel', 2000,to_date('24.09.2001','dd/mm/yyyy'), 4);
insert into ingrijitor values (seq_ingrijitor.nextval, 'Coca', 'Eugen', 1500,to_date('24.09.1998','dd/mm/yyyy'), 1);
insert into ingrijitor values (seq_ingrijitor.nextval, 'Mariut', 'Elena', 1500,to_date('04.04.2001','dd/mm/yyyy'), 3);
insert into ingrijitor values (seq_ingrijitor.nextval, 'Muresan', 'Teofil', 2600,to_date('19.11.2022','dd/mm/yyyy'), 2);
insert into ingrijitor values (seq_ingrijitor.nextval, 'Neamt', 'Liviu', 1400,to_date('01.09.2022','dd/mm/yyyy'), 5); 
insert into ingrijitor values (seq_ingrijitor.nextval, 'Ciobanu', 'Ioana', 1300,to_date('01.08.2021','dd/mm/yyyy'), 5); 
insert into ingrijitor values (seq_ingrijitor.nextval, 'Ursu', 'Camelia', 2000,to_date('01.08.2003','dd/mm/yyyy'), 7); 
insert into ingrijitor values (seq_ingrijitor.nextval, 'Paduraru', 'Ion', 2300,to_date('08.08.2003','dd/mm/yyyy'), 1); 
insert into ingrijitor values (seq_ingrijitor.nextval, 'Mitronici', 'Iuliana', 1200,to_date('12.03.2010','dd/mm/yyyy'), 1); 
insert into ingrijitor values (seq_ingrijitor.nextval, 'Mormocea', 'Dorina', 2000,to_date('01.01.1998','dd/mm/yyyy'), 1); 
insert into ingrijitor values (11, 'Ursu', 'Alina', 2500,to_date('25.02.2001','dd/mm/yyyy'), 4);

commit;
drop table ingrijitor;
drop sequence seq_ingrijitor
select * from ingrijitor

--SPECIALIZARE
create table specializare
(id_specializare number(5) constraint pk_specializare primary key,
nume varchar2(50),
durata number(5),
id_facultate number(5),
constraint fk_specializare foreign key (id_facultate) references facultate(id_facultate)
);

create sequence seq_specializare
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

insert into specializare values (seq_specializare.nextval, 'Matematica', 3, 1);
insert into specializare values (seq_specializare.nextval, 'Informatica', 3, 1);
insert into specializare values (seq_specializare.nextval, 'Limba si literatura romana', 3, 3);
insert into specializare values (seq_specializare.nextval, 'Drept', 4, 4);
insert into specializare values (seq_specializare.nextval, 'Biochimie', 3, 10);
insert into specializare values (seq_specializare.nextval, 'Matematica', 3, 2);
insert into specializare values (seq_specializare.nextval, 'Limba si literatura romana', 3, 6);
insert into specializare values (seq_specializare.nextval, 'Ingineria sistemelor', 4, 7);
insert into specializare values (seq_specializare.nextval, 'Fizica', 3, 9); 
insert into specializare values (seq_specializare.nextval, 'Ingineria sistemelor electroenergetice', 4, 5);

commit;

--STUDENT
create table student
(id_student number(5) constraint pk_student primary key,
nume varchar2(50),
prenume varchar2(50),
medie number(3, 2),
an number(5)
);

create sequence seq_student
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

insert into student values (seq_student.nextval, 'Teodoro', 'Emil', 9.2, 2);
insert into student values (seq_student.nextval, 'Stefanescu', 'Florian', 9.5, 1);
insert into student values (seq_student.nextval, 'Stanescu', 'Constantin', 8.6, 4);
insert into student values (seq_student.nextval, 'Popa', 'Valentin', 9.9, 3);
insert into student values (seq_student.nextval, 'Ofrim', 'Dragos', 8.3, 3);
insert into student values (seq_student.nextval, 'Nicolae', 'George', 9, 3);
insert into student values (seq_student.nextval, 'Munteanu', 'Toader', 7.9, 2);
insert into student values (seq_student.nextval, 'Munteanu', 'Calin', 9.9, 1);
insert into student values (seq_student.nextval, 'Cobzaru', 'Alina', 8.9, 1);
insert into student values (seq_student.nextval, 'Voicu', 'Aida', 7.8, 4);

commit;
drop table student;
drop sequence seq_student;
select * from student


--PROIECT
create table proiect
(id_proiect number(5) constraint pk_proiect primary key,
nume varchar2(50),
data_prezentare date
);

create sequence seq_proiect
increment by 1
start with 0
minvalue 0
maxvalue 5
nocycle;

insert into proiect values (seq_proiect.nextval, 'Proiect 1',to_date('29.01.2022','dd/mm/yyyy'));
insert into proiect values (seq_proiect.nextval, 'Proiect 2',to_date('03.03.2022','dd/mm/yyyy'));
insert into proiect values (seq_proiect.nextval, 'Proiect 3',to_date('24.01.2022','dd/mm/yyyy'));
insert into proiect values (seq_proiect.nextval, 'Proiect 4',to_date('24.01.2022','dd/mm/yyyy'));
insert into proiect values (seq_proiect.nextval, 'Proiect 5',to_date('24.01.2022','dd/mm/yyyy'));

commit;


--PROFESOR
create table profesor
(id_profesor number(5) constraint pk_profesor primary key,
nume varchar2(50),
vechime number(5)
);

drop table profesor

create sequence seq_profesor
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

drop sequence seq_profesor

insert into profesor values (seq_profesor.nextval, 'Dumitrescu Dumitru', 2);
insert into profesor values (seq_profesor.nextval, 'Petrescu Maria', 4);
insert into profesor values (seq_profesor.nextval, 'Negrescu Alexandra', 13);
insert into profesor values (seq_profesor.nextval, 'Vladimirescu Vlad', 12);
insert into profesor values (seq_profesor.nextval, 'Iliescu Ilie', 5);
insert into profesor values (seq_profesor.nextval, 'Lungu Andrei', 10);
insert into profesor values (seq_profesor.nextval, 'Badea Ion', 9);
insert into profesor values (seq_profesor.nextval, 'Cernat Mihai', 12);
insert into profesor values (seq_profesor.nextval, 'Ivanov Virginia', 20);
insert into profesor values (seq_profesor.nextval, 'Nicoara Tania', 2);

commit;
select * from profesor


--CURS
create table curs
(id_curs number(5) constraint pk_curs primary key,
nume varchar2(50)
);

create sequence seq_curs
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

insert into curs values (seq_curs.nextval, 'Programare Orientata pe Obiecte');
insert into curs values (seq_curs.nextval, 'Algebra');
insert into curs values (seq_curs.nextval, 'Literatura universala');
insert into curs values (seq_curs.nextval, 'Biologie celulara');
insert into curs values (seq_curs.nextval, 'Electricitate');
insert into curs values (seq_curs.nextval, 'Sisteme de operare');
insert into curs values (seq_curs.nextval, 'Limba si literatura romana');
insert into curs values (seq_curs.nextval, 'Microeconomie');
insert into curs values (seq_curs.nextval, 'Drept civil');
insert into curs values (seq_curs.nextval, 'Analiza');

commit;


--TINE
create table tine
(id_tine number(5) constraint pk_tine primary key,
id_curs number(5),
id_profesor number(5),
constraint fk_tine_curs foreign key (id_curs) references curs(id_curs),
constraint fk_tine_profesor foreign key (id_profesor) references profesor(id_profesor)
);

drop table tine

create sequence seq_tine
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

drop sequence seq_tine

insert into tine values (seq_tine.nextval, 1, 3);
insert into tine values (seq_tine.nextval, 2, 10);
insert into tine values (seq_tine.nextval, 3, 6);
insert into tine values (seq_tine.nextval, 4, 4);
insert into tine values (seq_tine.nextval, 5, 7);
insert into tine values (seq_tine.nextval, 6, 9);
insert into tine values (seq_tine.nextval, 7, 2);
insert into tine values (seq_tine.nextval, 8, 8);
insert into tine values (seq_tine.nextval, 9, 5); 
insert into tine values (seq_tine.nextval, 10, 1);

commit;

--COORDONEAZA
create table coordoneaza
(id_coordoneaza number(5) constraint pk_coordoneaza primary key,
id_profesor number(5),
id_student number(5),
id_proiect number(5),
constraint fk_coordoneaza_profesor foreign key (id_profesor) references profesor(id_profesor),
constraint fk_coordoneaza_student foreign key (id_student) references student(id_student),
constraint fk_coordoneaza_proiect foreign key (id_proiect) references proiect(id_proiect)
);

drop table coordoneaza

create sequence seq_coordoneaza
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

drop sequence seq_coordoneaza

insert into coordoneaza values (seq_coordoneaza.nextval, 1, 3, 5);
insert into coordoneaza values (seq_coordoneaza.nextval, 2, 10, 1);
insert into coordoneaza values (seq_coordoneaza.nextval, 3, 6, 2);
insert into coordoneaza values (seq_coordoneaza.nextval, 4, 4, 5);
insert into coordoneaza values (seq_coordoneaza.nextval, 5, 7, 5);
insert into coordoneaza values (seq_coordoneaza.nextval, 6, 9, 3);
insert into coordoneaza values (seq_coordoneaza.nextval, 7, 2, 2);
insert into coordoneaza values (seq_coordoneaza.nextval, 8, 8, 1);
insert into coordoneaza values (seq_coordoneaza.nextval, 9, 5, 1); 
insert into coordoneaza values (seq_coordoneaza.nextval, 10, 1, 1);

commit;
drop table coordoneaza
drop sequence seq_coordoneaza

--ESTE_LA
create table este_la
(id_este_la number(5) constraint pk_este_la primary key,
id_student number(5),
id_specializare number(5),
constraint fk_este_la_student foreign key (id_student) references student(id_student),
constraint fk_este_la_specializare foreign key (id_specializare) references specializare(id_specializare)
);

create sequence seq_este_la
increment by 1
start with 0
minvalue 0
maxvalue 10
nocycle;

insert into este_la values (seq_este_la.nextval, 3, 1);
insert into este_la values (seq_este_la.nextval, 10, 7);
insert into este_la values (seq_este_la.nextval, 6, 2);
insert into este_la values (seq_este_la.nextval, 4, 5);
insert into este_la values (seq_este_la.nextval, 7, 4);
insert into este_la values (seq_este_la.nextval, 9, 3);
insert into este_la values (seq_este_la.nextval, 2, 10);
insert into este_la values (seq_este_la.nextval, 8, 4);
insert into este_la values (seq_este_la.nextval, 5, 8);  
insert into este_la values (seq_este_la.nextval, 1, 1);

commit;
drop table este_la
drop sequence seq_este_la

--6) Afisati studentii care sunt la o specializare cu id-ul dat si sunt coordonati de profesori care au cel putin 10 ani vechime.

create or replace procedure c6(cod_specializare specializare.id_specializare%type) is
        type tablou_imbricat is table of student.id_student%type;
        v_student tablou_imbricat := tablou_imbricat();
        
        type vector is varray(30) of profesor.id_profesor%type;
        v_profesor vector := vector();
            
        cursor c is
            select id_student, id_profesor 
            from coordoneaza;
            
        n number(3);
            
    begin
        select count(*)
        into n 
        from profesor;
        
        for i in 1..n loop
            v_profesor.extend;
        end loop;
        
        select id_student
        bulk collect into v_student
        from student s join este_la e using (id_student)
        where e.id_specializare = cod_specializare;
        
        select id_profesor
        bulk collect into v_profesor
        from profesor
        where vechime >= 10;
        
        for i in c loop
            for j in 1..v_student.count loop
                if v_student(j) = i.id_student then
                    for k in 1..v_profesor.count loop
                        if v_profesor(k) = i.id_profesor then 
                            DBMS_OUTPUT.PUT_LINE('Studentul cu id-ul ' || i.id_student || ' este coordonat de profesorul cu id-ul ' || i.id_profesor);
                        end if;
                    end loop;
                end if;
            end loop;
        end loop;
    end c6;

begin 
    c6(2);
end;
        
   
--7) Pentru fiecare facultate, afisati numele si lista ingrijitorilor (nume si salariu) care se ocupa de aceasta. Tratati cazul in care nu exista ingrijitori.

create or replace procedure c7 is
    type tablou_imbricat is table of facultate.id_facultate%type;
    v_id_facultate tablou_imbricat := tablou_imbricat();
    
    v_nume_facultate facultate.nume%type;
    v_nume_ingrijitor ingrijitor.nume%type;
    v_prenume_ingrijitor ingrijitor.prenume%type;
    v_salariu ingrijitor.salariu%type;
    contor number(3);
    
    cursor c(cod_facultate facultate.id_facultate%type) is 
        select i.nume, i.prenume, i.salariu
        from ingrijitor i, facultate f
        where i.id_facultate = f.id_facultate and f.id_facultate = cod_facultate;
begin
    select id_facultate
    bulk collect into v_id_facultate
    from facultate;
    
    for i in v_id_facultate.first..v_id_facultate.last loop
        select nume
        into v_nume_facultate
        from facultate
        where id_facultate = v_id_facultate(i);
        
        contor := 0;
        DBMS_OUTPUT.PUT_LINE(v_nume_facultate || ':');
            
        open c(v_id_facultate(i));
        loop
            fetch c into v_nume_ingrijitor, v_prenume_ingrijitor, v_salariu;
            exit when c%NOTFOUND;
            contor := contor + 1;
            DBMS_OUTPUT.PUT_LINE('      ' || v_nume_ingrijitor || ' ' || v_prenume_ingrijitor || ',' || v_salariu);
        end loop;
        close c;
        
        if contor = 0 then
            DBMS_OUTPUT.PUT_LINE('      Nu exista ingrijitori.');
        end if;
        
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------');
    end loop; 
end c7;

begin 
    c7;
end;

--8) Afisati universitatea de care apartine facultatea unde lucreaza un ingrijitor cu numele dat ca parametru.

create or replace function c8(nume_ingrijitor ingrijitor.nume%type)
   return universitate.nume%type 
   is v_universitate universitate.nume%type;
begin
    select u.nume 
    into v_universitate
    from universitate u join facultate f using (id_universitate)
                        join ingrijitor i using (id_facultate)
    where i.nume = nume_ingrijitor;
    return v_universitate;
exception 
    when no_data_found then
        DBMS_OUTPUT.PUT_LINE('Nu exista ingrijitori cu numele dat.');
        RAISE_APPLICATION_ERROR(-20000, 'Nu exista ingrijitori cu numele dat.');
    when too_many_rows then
        DBMS_OUTPUT.PUT_LINE('Exista prea multi ingrijitori cu numele dat.');
        RAISE_APPLICATION_ERROR(-20001, 'Exista prea multi ingrijitori cu numele dat.');
    when others then
        DBMS_OUTPUT.PUT_LINE('Alta eroare.');
        RAISE_APPLICATION_ERROR(-20002, 'Alta eroare.');
end c8;

begin 
    DBMS_OUTPUT.PUT_LINE(c8('Mormocea')); -- fara erori
end;

begin 
    DBMS_OUTPUT.PUT_LINE(c8('Gheorghe')); --no data found
end;

begin 
    DBMS_OUTPUT.PUT_LINE(c8('Ursu')); -- too many rows
end;

--9) Afisati orasul facultatii unde merge studentul cu nume dat ca parametru.

create or replace procedure c9 (v_student student.nume%type)is
    v_locatie locatie.oras%type;
begin 
    select l.oras
    into v_locatie
    from locatie l join facultate f using (id_locatie)
                   join specializare s using (id_facultate)
                   join este_la e using (id_specializare)
                   join student st using (id_student)
    where st.nume = v_student;
    DBMS_OUTPUT.PUT_LINE(v_locatie);
exception
    when no_data_found then
        DBMS_OUTPUT.PUT_LINE('Nu exista studenti cu numele dat.');
        RAISE_APPLICATION_ERROR(-20000, 'Nu exista studenti cu numele dat.');
    when too_many_rows then
        DBMS_OUTPUT.PUT_LINE('Exista prea multi studenti cu numele dat.');
        RAISE_APPLICATION_ERROR(-20001, 'Exista prea multi studenti cu numele dat.');
    when others then
        DBMS_OUTPUT.PUT_LINE('Alta eroare.');
        RAISE_APPLICATION_ERROR(-20002, 'Alta eroare.');
end c9;

begin 
    c9('Popa'); -- fara erori
end;

begin 
    c9('Gheorghe'); --no data found
end;

begin 
    c9('Munteanu'); -- too many rows
end;

--10) Definiti un trigger care sa permita modificarea tabelului ingrijitor doar intre 8 si 12 de luni pana vineri.
create or replace trigger c10
    before insert or update or delete on ingrijitor
begin
    if to_char(sysdate,'d') = 1 or to_char(sysdate,'d') = 7 or to_char(sysdate, 'hh24') not between 8 and 12 then
        RAISE_APPLICATION_ERROR(-20001, 'Tabelul nu poate fi actualizat.');
    end if;
end;
/
drop trigger c10;

--insert into ingrijitor values (12, 'Ion', 'Alexandra', 3000,to_date('25.02.2001','dd/mm/yyyy'), 4);

--11) Definiti un trigger prin care sa nu se poata mari cu mai mult de 20% salariile ingrijitorilor.
create or replace trigger c11 
    before update of salariu on ingrijitor
    for each row
begin 
    if :new.salariu > 1.2 * :old.salariu then
        RAISE_APPLICATION_ERROR(-20002, 'Salariul nu poate fi marit.');
    end if;
end;
/
drop trigger c11;

--update ingrijitor set salariu = 1.5 * salariu

--12) Definiti un trigger care sa introduca date in tabelul audit_12 dupa ce utilizatorul a folosit o comanda LDD.
create table audit_12
    (utilizator varchar2(50),
    nume_bd varchar2(50),
    eveniment varchar2(50),
    nume_obiect varchar2(50),
    data date);
    
create or replace trigger c12
    after create or drop or alter on schema
begin
    insert into audit_12
    values (sys.login_user, sys.database_name, sys.sysevent, sys.dictionary_obj_name, sysdate);
end;

drop trigger c12;

create table test
(id_test number(5),
nume varchar2(50)
);

select * from audit_12;

--13)
create or replace package pachet as
    procedure c6(cod_specializare specializare.id_specializare%type);
    procedure c7;
    function c8(nume_ingrijitor ingrijitor.nume%type)
        return universitate.nume%type; 
    procedure c9 (v_student student.nume%type);
end;

create or replace package body pachet as
--6)
procedure c6(cod_specializare specializare.id_specializare%type) is
        type tablou_imbricat is table of student.id_student%type;
        v_student tablou_imbricat := tablou_imbricat();
        
        type vector is varray(30) of profesor.id_profesor%type;
        v_profesor vector := vector();
            
        cursor c is
            select id_student, id_profesor 
            from coordoneaza;
            
        n number(3);
            
    begin
        select count(*)
        into n 
        from profesor;
        
        for i in 1..n loop
            v_profesor.extend;
        end loop;
        
        select id_student
        bulk collect into v_student
        from student s join este_la e using (id_student)
        where e.id_specializare = cod_specializare;
        
        select id_profesor
        bulk collect into v_profesor
        from profesor
        where vechime >= 10;
        
        for i in c loop
            for j in 1..v_student.count loop
                if v_student(j) = i.id_student then
                    for k in 1..v_profesor.count loop
                        if v_profesor(k) = i.id_profesor then 
                            DBMS_OUTPUT.PUT_LINE('Studentul cu id-ul ' || i.id_student || ' este coordonat de profesorul cu id-ul ' || i.id_profesor);
                        end if;
                    end loop;
                end if;
            end loop;
        end loop;
    end c6;
   
--7)
procedure c7 is
    type tablou_imbricat is table of facultate.id_facultate%type;
    v_id_facultate tablou_imbricat := tablou_imbricat();
    
    v_nume_facultate facultate.nume%type;
    v_nume_ingrijitor ingrijitor.nume%type;
    v_prenume_ingrijitor ingrijitor.prenume%type;
    v_salariu ingrijitor.salariu%type;
    contor number(3);
    
    cursor c(cod_facultate facultate.id_facultate%type) is 
        select i.nume, i.prenume, i.salariu
        from ingrijitor i, facultate f
        where i.id_facultate = f.id_facultate and f.id_facultate = cod_facultate;
begin
    select id_facultate
    bulk collect into v_id_facultate
    from facultate;
    
    for i in v_id_facultate.first..v_id_facultate.last loop
        select nume
        into v_nume_facultate
        from facultate
        where id_facultate = v_id_facultate(i);
        
        contor := 0;
        DBMS_OUTPUT.PUT_LINE(v_nume_facultate || ':');
            
        open c(v_id_facultate(i));
        loop
            fetch c into v_nume_ingrijitor, v_prenume_ingrijitor, v_salariu;
            exit when c%NOTFOUND;
            contor := contor + 1;
            DBMS_OUTPUT.PUT_LINE('      ' || v_nume_ingrijitor || ' ' || v_prenume_ingrijitor || ',' || v_salariu);
        end loop;
        close c;
        
        if contor = 0 then
            DBMS_OUTPUT.PUT_LINE('      Nu exista ingrijitori.');
        end if;
        
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------');
    end loop; 
end c7;

--8)
function c8(nume_ingrijitor ingrijitor.nume%type)
   return universitate.nume%type 
   is v_universitate universitate.nume%type;
begin
    select u.nume 
    into v_universitate
    from universitate u join facultate f using (id_universitate)
                        join ingrijitor i using (id_facultate)
    where i.nume = nume_ingrijitor;
    return v_universitate;
exception 
    when no_data_found then
        DBMS_OUTPUT.PUT_LINE('Nu exista ingrijitori cu numele dat.');
        RAISE_APPLICATION_ERROR(-20000, 'Nu exista ingrijitori cu numele dat.');
    when too_many_rows then
        DBMS_OUTPUT.PUT_LINE('Exista prea multi ingrijitori cu numele dat.');
        RAISE_APPLICATION_ERROR(-20001, 'Exista prea multi ingrijitori cu numele dat.');
    when others then
        DBMS_OUTPUT.PUT_LINE('Alta eroare.');
        RAISE_APPLICATION_ERROR(-20002, 'Alta eroare.');
end c8;

--9)
procedure c9 (v_student student.nume%type)is
    v_locatie locatie.oras%type;
begin 
    select l.oras
    into v_locatie
    from locatie l join facultate f using (id_locatie)
                   join specializare s using (id_facultate)
                   join este_la e using (id_specializare)
                   join student st using (id_student)
    where st.nume = v_student;
    DBMS_OUTPUT.PUT_LINE(v_locatie);
exception
    when no_data_found then
        DBMS_OUTPUT.PUT_LINE('Nu exista studenti cu numele dat.');
        RAISE_APPLICATION_ERROR(-20000, 'Nu exista studenti cu numele dat.');
    when too_many_rows then
        DBMS_OUTPUT.PUT_LINE('Exista prea multi studenti cu numele dat.');
        RAISE_APPLICATION_ERROR(-20001, 'Exista prea multi studenti cu numele dat.');
    when others then
        DBMS_OUTPUT.PUT_LINE('Alta eroare.');
        RAISE_APPLICATION_ERROR(-20002, 'Alta eroare.');
end c9;
end;
--------------
begin 
    pachet.c6(2);
end;

begin 
    pachet.c7;
end;

begin 
    DBMS_OUTPUT.PUT_LINE(pachet.c8('Mormocea'));
end;

begin 
    pachet.c9('Popa'); 
end;